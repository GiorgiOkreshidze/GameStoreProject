// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("GameEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "GenreEntityId");

                    b.HasIndex("GenreEntityId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "PlatformEntityId");

                    b.HasIndex("PlatformEntityId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("GenreEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a78bcf1-d627-4fd1-a179-c27d1650f654"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("3cf2a4ec-c87e-4006-abaf-3dd26f1e7db2"),
                            Name = "RTS",
                            ParentGenreId = new Guid("2a78bcf1-d627-4fd1-a179-c27d1650f654")
                        },
                        new
                        {
                            Id = new Guid("9a9f279f-c51a-4055-b7b7-a3d10482e2ed"),
                            Name = "TBS",
                            ParentGenreId = new Guid("2a78bcf1-d627-4fd1-a179-c27d1650f654")
                        },
                        new
                        {
                            Id = new Guid("159aa1b6-6674-4f4a-9ee5-636f3b121d92"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("d9eb95e7-5be6-4ae2-9185-6a985413e7ff"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("745a261f-9805-4d03-ba51-1c80cfce50ad"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("4af9f656-7ac6-44b7-8616-c6a69ffaf552"),
                            Name = "Rally",
                            ParentGenreId = new Guid("745a261f-9805-4d03-ba51-1c80cfce50ad")
                        },
                        new
                        {
                            Id = new Guid("43ede327-16f4-4d7b-ac16-eb090789f2a9"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("745a261f-9805-4d03-ba51-1c80cfce50ad")
                        },
                        new
                        {
                            Id = new Guid("0698b891-2e51-4b40-a01b-458aeabd6172"),
                            Name = "Formula",
                            ParentGenreId = new Guid("745a261f-9805-4d03-ba51-1c80cfce50ad")
                        },
                        new
                        {
                            Id = new Guid("caa3e07e-e0e3-4f0e-b0bd-8aa255503d06"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("745a261f-9805-4d03-ba51-1c80cfce50ad")
                        },
                        new
                        {
                            Id = new Guid("0bda1c48-8b0f-4f0a-a912-f4319cecb9ae"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("ebb58d0e-795a-4a0d-8597-73c7c1f51ac8"),
                            Name = "FPS",
                            ParentGenreId = new Guid("0bda1c48-8b0f-4f0a-a912-f4319cecb9ae")
                        },
                        new
                        {
                            Id = new Guid("cf047ced-7dc8-4238-bac3-115ea37cce09"),
                            Name = "TPS",
                            ParentGenreId = new Guid("0bda1c48-8b0f-4f0a-a912-f4319cecb9ae")
                        },
                        new
                        {
                            Id = new Guid("11e3023e-197a-4863-8c5a-bc221ebae4be"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("c810e50c-55ba-42f9-8d31-a29cee42bf90"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PlatformEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b5cdf01-f7cb-4714-b6d6-c534c5bb7863"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("6bd1a416-4966-4cf5-927c-037dbaf1c2ee"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("cada2521-bdcd-4915-86fc-33feadc1124a"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("95e32a44-a290-41f5-b09b-1076a2818da6"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("PublisherEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.PublisherEntity", "PublisherEntity")
                        .WithMany("GameEntities")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublisherEntity");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenreEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PlatformEntity", null)
                        .WithMany()
                        .HasForeignKey("PlatformEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.GenreEntity", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Navigation("GameEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
