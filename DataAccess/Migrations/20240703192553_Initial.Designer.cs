// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20240703192553_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("GameEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "GenreEntityId");

                    b.HasIndex("GenreEntityId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "PlatformEntityId");

                    b.HasIndex("PlatformEntityId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("GenreEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("742c6f15-8c3e-4213-87df-9f3a18e91683"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("1067bed4-d7aa-4748-b9e9-a6f9357d488a"),
                            Name = "RTS",
                            ParentGenreId = new Guid("742c6f15-8c3e-4213-87df-9f3a18e91683")
                        },
                        new
                        {
                            Id = new Guid("9f2f8c3d-55fc-41c5-b687-98cd1b25229d"),
                            Name = "TBS",
                            ParentGenreId = new Guid("742c6f15-8c3e-4213-87df-9f3a18e91683")
                        },
                        new
                        {
                            Id = new Guid("f76974be-8105-478b-9876-16106a993671"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("aa09e067-200c-4b5f-8ca2-76cbc273d80a"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("eba938cb-c257-4079-82e4-1d4a22753786"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("bb28cab6-bb51-4682-ba9d-2458517101b8"),
                            Name = "Rally",
                            ParentGenreId = new Guid("eba938cb-c257-4079-82e4-1d4a22753786")
                        },
                        new
                        {
                            Id = new Guid("b7b49741-1b5e-4d13-a437-6fd6d48220fc"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("eba938cb-c257-4079-82e4-1d4a22753786")
                        },
                        new
                        {
                            Id = new Guid("05d9af50-709b-4e19-920c-3cc6791b22d8"),
                            Name = "Formula",
                            ParentGenreId = new Guid("eba938cb-c257-4079-82e4-1d4a22753786")
                        },
                        new
                        {
                            Id = new Guid("75c92c51-1ed6-46ac-9178-dd21d8894ea0"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("eba938cb-c257-4079-82e4-1d4a22753786")
                        },
                        new
                        {
                            Id = new Guid("8cfa6a94-798a-49e6-a197-77814b9adec7"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("e96878b2-0479-492c-9491-efef4d36ed1b"),
                            Name = "FPS",
                            ParentGenreId = new Guid("8cfa6a94-798a-49e6-a197-77814b9adec7")
                        },
                        new
                        {
                            Id = new Guid("b4fbb613-5cd0-486e-8863-c1159df5adb9"),
                            Name = "TPS",
                            ParentGenreId = new Guid("8cfa6a94-798a-49e6-a197-77814b9adec7")
                        },
                        new
                        {
                            Id = new Guid("034f2c9e-6b39-4247-a46a-c9e4cead66f4"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("e5807121-9457-4e8d-a372-ce1f15152dc3"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PlatformEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81c6e194-40e2-43af-a3fc-3aa2acad8415"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("c4c9689d-c96d-4996-b6a7-14de9b9d35d7"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("3f4e76bd-49f0-45e2-863b-1d23447f03f6"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("39dfa3f4-f5d8-4715-9bfd-996afb42ad68"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenreEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PlatformEntity", null)
                        .WithMany()
                        .HasForeignKey("PlatformEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.GenreEntity", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });
#pragma warning restore 612, 618
        }
    }
}
