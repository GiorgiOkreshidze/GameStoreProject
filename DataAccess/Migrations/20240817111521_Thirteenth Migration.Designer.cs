// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20240817111521_Thirteenth Migration")]
    partial class ThirteenthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.BannedUserEntity", b =>
                {
                    b.Property<string>("User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User");

                    b.ToTable("BannedUserEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameEntityId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("CommentEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.DatabaseIds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MongoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseIdsSet");
                });

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PublisherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<int>("UnitsOnOrder")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("GameEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "GenreEntityId");

                    b.HasIndex("GenreEntityId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "PlatformEntityId");

                    b.HasIndex("PlatformEntityId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("GenreEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a66d2e0-aa89-43f0-892e-d35659b46a96"),
                            Description = "",
                            Name = "Strategy",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("d59012c2-0e63-4875-b757-ebce62a0e103"),
                            Description = "",
                            Name = "RTS",
                            ParentGenreId = new Guid("4a66d2e0-aa89-43f0-892e-d35659b46a96"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("e192d8aa-a56a-4f92-947e-a87f7e7ec3e2"),
                            Description = "",
                            Name = "TBS",
                            ParentGenreId = new Guid("4a66d2e0-aa89-43f0-892e-d35659b46a96"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("ca9cc793-1fe9-42f6-b820-445af9b59546"),
                            Description = "",
                            Name = "RPG",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("7b52e525-b9b1-4565-9e67-467ee78c1ca1"),
                            Description = "",
                            Name = "Sports",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("0e0476cd-7e15-4701-abe3-19b3cd93f3a6"),
                            Description = "",
                            Name = "Races",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("806f7294-b360-4313-8543-39ee9c23c19c"),
                            Description = "",
                            Name = "Rally",
                            ParentGenreId = new Guid("0e0476cd-7e15-4701-abe3-19b3cd93f3a6"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("aa5cc1dd-531e-40f7-a505-57520ae0f5f5"),
                            Description = "",
                            Name = "Arcade",
                            ParentGenreId = new Guid("0e0476cd-7e15-4701-abe3-19b3cd93f3a6"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("de3dc7d6-ff21-492e-ba36-e1cfb40bd78c"),
                            Description = "",
                            Name = "Formula",
                            ParentGenreId = new Guid("0e0476cd-7e15-4701-abe3-19b3cd93f3a6"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("68645222-7273-4680-9e94-35de5b0eaf75"),
                            Description = "",
                            Name = "Off-road",
                            ParentGenreId = new Guid("0e0476cd-7e15-4701-abe3-19b3cd93f3a6"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("9f67d6b0-dbcf-400d-ac86-1564406f1916"),
                            Description = "",
                            Name = "Action",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("1c3f95d5-527d-41ce-b2e9-e2f04a1c0058"),
                            Description = "",
                            Name = "FPS",
                            ParentGenreId = new Guid("9f67d6b0-dbcf-400d-ac86-1564406f1916"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("bed83619-1c9c-4db3-a8cf-329a8d841945"),
                            Description = "",
                            Name = "TPS",
                            ParentGenreId = new Guid("9f67d6b0-dbcf-400d-ac86-1564406f1916"),
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("d15d24a3-54cd-4379-86f6-b404bb9d374c"),
                            Description = "",
                            Name = "Adventure",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("94a42337-75e5-447e-ac0e-9ec2ddf4670f"),
                            Description = "",
                            Name = "Puzzle & Skill",
                            Picture = ""
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Freight")
                        .HasColumnType("float");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipVia")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Title = "Bank",
                            Description = "Bank Method Description",
                            ImageUrl = "Bank Method URL"
                        },
                        new
                        {
                            Title = "IBox terminal",
                            Description = "IBox Terminal Method Description",
                            ImageUrl = "IBox Terminal Method URL"
                        },
                        new
                        {
                            Title = "Visa",
                            Description = "Visa Method Description",
                            ImageUrl = "Visa Method URL"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PlatformEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("490b433f-f19d-4627-af7b-cb6af12c7d68"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("f1b78aa6-8aec-4620-af7a-eada99ec86c0"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("6abab298-d80c-4033-bd94-3b5add2a43d2"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("2c7885ce-39ff-45dc-b24e-3fc17ce5ea9a"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("PublisherEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleEntityId", "UserEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", "GameEntity")
                        .WithMany("CommentEntities")
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.CommentEntity", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("GameEntity");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.PublisherEntity", "PublisherEntity")
                        .WithMany("GameEntities")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublisherEntity");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenreEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PlatformEntity", null)
                        .WithMany()
                        .HasForeignKey("PlatformEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.GenreEntity", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("DataAccess.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.UserRole", b =>
                {
                    b.HasOne("DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.Navigation("CommentEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Navigation("GameEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
