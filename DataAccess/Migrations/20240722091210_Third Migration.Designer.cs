// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20240722091210_Third Migration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("PublisherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("GameEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "GenreEntityId");

                    b.HasIndex("GenreEntityId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameEntityId", "PlatformEntityId");

                    b.HasIndex("PlatformEntityId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("GenreEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34a55503-ffd4-456a-8e3a-3db1e5119351"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("6a49ebe5-dd2f-422f-b839-fcb4cf194fb2"),
                            Name = "RTS",
                            ParentGenreId = new Guid("34a55503-ffd4-456a-8e3a-3db1e5119351")
                        },
                        new
                        {
                            Id = new Guid("39274e2a-0195-4b1f-a3bf-c515c136d3c9"),
                            Name = "TBS",
                            ParentGenreId = new Guid("34a55503-ffd4-456a-8e3a-3db1e5119351")
                        },
                        new
                        {
                            Id = new Guid("6258e0f0-2b30-4f9e-b58e-c9db433bf928"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("3bb4cd02-9fcc-4676-b7cf-ade9dcc14ce9"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("d6e874f3-0ac4-43a5-8896-b73d1c64b315"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("e38cbd14-b845-4b75-bb43-14aceea60c3a"),
                            Name = "Rally",
                            ParentGenreId = new Guid("d6e874f3-0ac4-43a5-8896-b73d1c64b315")
                        },
                        new
                        {
                            Id = new Guid("742fb096-8310-4c8c-8e23-4c242f0e2368"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("d6e874f3-0ac4-43a5-8896-b73d1c64b315")
                        },
                        new
                        {
                            Id = new Guid("8a95ad46-7cc3-4c91-842f-ac3c548367fc"),
                            Name = "Formula",
                            ParentGenreId = new Guid("d6e874f3-0ac4-43a5-8896-b73d1c64b315")
                        },
                        new
                        {
                            Id = new Guid("4aaa444f-61cd-4702-addd-8a022b1df434"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("d6e874f3-0ac4-43a5-8896-b73d1c64b315")
                        },
                        new
                        {
                            Id = new Guid("91acfbb6-c13d-4e5e-ba00-a49f43c2e45c"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("b0cbe55c-8b06-4ab3-9542-2adaeed4b2c7"),
                            Name = "FPS",
                            ParentGenreId = new Guid("91acfbb6-c13d-4e5e-ba00-a49f43c2e45c")
                        },
                        new
                        {
                            Id = new Guid("e4451bda-8930-4b49-b3d6-02a2190648df"),
                            Name = "TPS",
                            ParentGenreId = new Guid("91acfbb6-c13d-4e5e-ba00-a49f43c2e45c")
                        },
                        new
                        {
                            Id = new Guid("3080c56c-505a-4357-a4fe-32a1c5b60442"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("9d283917-34ac-473f-aac8-fb73750ecee6"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("DataAccess.Entities.PlatformEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e700f8db-67a8-4871-93d5-bf4ce14a32d5"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("50ab627f-f57b-4271-a2fc-072adfe64257"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("c1916250-d617-499d-b719-e83ccbe1f945"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("af10512e-25d5-4e3e-99ad-806b6160a940"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("PublisherEntities");
                });

            modelBuilder.Entity("DataAccess.Entities.GameEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.PublisherEntity", "PublisherEntity")
                        .WithMany("GameEntities")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublisherEntity");
                });

            modelBuilder.Entity("DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenreEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GameEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PlatformEntity", null)
                        .WithMany()
                        .HasForeignKey("PlatformEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.GenreEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.GenreEntity", "ParentGenre")
                        .WithMany()
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("DataAccess.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.PublisherEntity", b =>
                {
                    b.Navigation("GameEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
